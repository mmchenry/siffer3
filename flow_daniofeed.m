function fl = flow_daniofeed(sim,pred,x,y,Field)
% Uses CFD data to define a 2D flow field generated by a suction-feeding
% fish predator.


%% Define time and spatial domain

% Spatial vectors
xs = linspace(sim.flow_lim(1),sim.flow_lim(2),sim.num_x);
ys = sim.flow_lim(3):mean(diff(xs)):sim.flow_lim(4);

% Mesh position for flow in predator FOR
[Xg,Yg] = meshgrid(xs,ys);

clear xs ys flow_lim



%% Downsample CFD data along x

skip_fctr = 4;

F_tmp(:,:,1) = Field(:,1:skip_fctr:end,1);
F_tmp(:,:,2) = Field(:,1:skip_fctr:end,2);
x = x(:,1:skip_fctr:end);
y = y(:,1:skip_fctr:end);

Field = F_tmp; clear F_tmp


%% Predator gape and position 

% Evenly-spaced time vector
t = linspace(0,sim.dur,sim.num_time)';

% Calculate variable dt, based on rate of change in gape speed
Dgape         = 10.*abs(diff(getGapeSpeed(t,pred))./diff(t));
sample_period = sim.dur.*Dgape./trapz(Dgape);

% Redefine time with variable period
t = [0; cumsum(sample_period)];

% Temporal variables for flow
pos      = getPredPos(t,pred);
gape_spd = getGapeSpeed(t,pred);
gape     = getGape(t,pred);

% Check that predator remains in fluid domain
if pos(:,1) > sim.flow_lim(2)
    error('Predator moves outside of fluid domain within simulation duration')
end

clear Dgape sample_period


%% Interpolate feeding field in global FOR

% Store variables up to this point
fl.t = t;
fl.pos = pos;
fl.gape_spd = gape_spd;
fl.gape = gape;

h = waitbar(0);

h = waitbar(0,'1','Name','Calculating flow field',...
            'CreateCancelBtn',...
            'setappdata(gcbf,''canceling'',1)');

% Scale up the flow field for each iteration
for i = 1:sim.num_time
    
    % Scale feeding field position to gape diameter
    Xf = gape(i).*x;
    Yf = gape(i).*y;
    
    % Scale flow speed to speed at gape
    Uf = -gape_spd(i).*Field(:,:,1);
    Vf = -gape_spd(i).*Field(:,:,2);
    
    % Flow zero when gape is zero
    if gape(i)==0
        U_tmp = Xg.*0;
        V_tmp = Yg.*0;
        
    % Otherwise, interpolate in global field
    else 
        warning off
        U_tmp = griddata(Xf,Yf,Uf,Xg,Yg);
        V_tmp = griddata(Xf,Yf,Vf,Xg,Yg);
        warning on
    end
    
    % Replace nans (positions outside of global field) with zeros
    U_tmp(isnan(U_tmp)) = 0;
    V_tmp(isnan(V_tmp)) = 0;
    
    % Displace position of flow field to predator's mouth
    Xmouth = Xg + pos(i,1);
    Ymouth = Yg + pos(i,2);

    % Store results
    fl.X(:,:,i) = Xmouth;
    fl.Y(:,:,i) = Ymouth;
    fl.U(:,:,i) = U_tmp;
    fl.V(:,:,i) = V_tmp;
    
    % Clear variables
    clear Xf Yf Uf Vf U_tmp V_tmp
    clear dUdx dUdy dVdx dVdy Xmouth Ymouth
    
    % Check for Cancel button press
    if getappdata(h,'canceling')
        delete(h)
        return
    end
    
    % Update waitbar
    waitbar(i/sim.num_time,h,...
            ['Done ' num2str(i) ' of ' num2str(sim.num_time)])
end

% Remove waitbar
delete(h)

% Find derivatives
[fl.dUdx,fl.dUdy,fl.dUdt] = gradient(fl.U,fl.X(1,:),fl.Y(:,1),fl.t);
[fl.dVdx,fl.dVdy,fl.dVdt] = gradient(fl.V,fl.X(1,:),fl.Y(:,1),fl.t);

clear t pos gape_spd gape Xg Yg x y Field


% Test gradident calculation over time
if 0
    figure;
    c_num = round(size(fl.X,2)/2);
    a = [0; diff(reshape(fl.U(l_num,c_num,:),size(fl.U,3),1,1))./mean(diff(fl.t))];
    a_test = reshape(fl.dUdt(l_num,c_num,:),size(fl.dUdt,3),1,1);
    plot(fl.t,a_test,'k',fl.t,a,'r--')
    ylabel('Acceleration')
end


end



function spd = getGapeSpeed(t,pred)
% Speed of flow (inertial FOR) at mouth
    
spd = pred.flw_spd.max * ((t./pred.flw_spd.t_max).*...
               (exp(1-(t./pred.flw_spd.t_max)))).^pred.flw_spd.alpha;

end


function gape = getGape(t,pred)
% Gape diameter
gape = pred.gape.max.*((t./pred.gape.t_max).*...
                  (exp(1-(t./pred.gape.t_max)))).^pred.gape.alpha;
end


function pos = getPredPos(t,pred)
%     dist = pred.dist.init + pred.dist.max.*((t./pred.dist.t_max).*...
%                          (exp(1-(t./pred.dist.t_max)))).^pred.dist.alpha;
    dist = pred.pos0(1) + pred.app_spd.*t;
    pos = [dist dist.*0];
end





